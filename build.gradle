plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.1'
	id 'io.spring.dependency-management' version '1.1.5'
  id "com.google.protobuf" version "0.9.4"
  id "org.liquibase.gradle" version "2.2.2"
}

group = 'dev.fizlrock'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
		mavenCentral()
}

dependencies {
	compileOnly 'org.projectlombok:lombok'
	// developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'



	// Данные
	runtimeOnly 'org.postgresql:postgresql'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	implementation 'org.mapstruct:mapstruct:1.5.5.Final'
	testAnnotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'


	// Liquibase
	liquibaseRuntime 'org.postgresql:postgresql'
	liquibaseRuntime 'org.liquibase:liquibase-core:4.24.0'
  liquibaseRuntime 'org.liquibase:liquibase-groovy-dsl:2.1.1'
  liquibaseRuntime 'info.picocli:picocli:4.7.5'
  liquibaseRuntime 'org.yaml:snakeyaml:1.33'

	// gRPC stuff
  if (JavaVersion.current().isJava9Compatible()) {
    // Workaround for @javax.annotation.Generated
    // see: https://github.com/grpc/grpc-java/issues/3633
    implementation 'javax.annotation:javax.annotation-api:1.3.1'
  }
  protobuf files("ext/")
  implementation 'net.devh:grpc-server-spring-boot-starter:3.1.0.RELEASE'

}

tasks.named('test') {
	useJUnitPlatform()
}
protobuf {
  protoc {
    // The artifact spec for the Protobuf Compiler
    artifact = 'com.google.protobuf:protoc:3.6.1'
  }
  plugins {
    // Optional: an artifact spec for a protoc plugin, with "grpc" as
    // the identifier, which can be referred to in the "plugins"
    // container of the "generateProtoTasks" closure.
    grpc {
      artifact = 'io.grpc:protoc-gen-grpc-java:1.15.1'
    }
  }
  generateProtoTasks {
    ofSourceSet('main').configureEach {
      plugins {
        // Apply the "grpc" plugin whose spec is defined above, without
        // options.  Note the braces cannot be omitted, otherwise the
        // plugin will not be added. This is because of the implicit way
        // NamedDomainObjectContainer binds the methods.
        grpc { }
      }
    }
  }
}

liquibase {
  activities {
		main {
			changelogFile 'src/main/resources/db/changelog/db.changelog-master.yaml'
			url 'jdbc:postgresql://localhost:5432/earsdb'
			username 'admin'
			password 'gracesecret'
			logLevel 'info'
			}
  }
}
